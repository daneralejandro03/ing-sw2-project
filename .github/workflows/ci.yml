name: CI Backend

on:
  push:
    branches: [salazardevelopment]
  pull_request:
    branches: [salazardevelopment]
  workflow_dispatch:

jobs:
  # ================= BUILD & PUSH IMAGES =================
  docker-build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [ms-notifications, ms-security]
    env:
      NOTIFY_PORT: ${{ secrets.PORT }}
      SECURITY_PORT: ${{ secrets.SECURITY_PORT }}
      MONGODB_URI: ${{ secrets.MONGODB_URI }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      EMAIL_CONNECTION_STRING: ${{ secrets.EMAIL_CONNECTION_STRING }}
      EMAIL_SENDER_ADDRESS: ${{ secrets.EMAIL_SENDER_ADDRESS }}
      TWILIO_SID: ${{ secrets.TWILIO_SID }}
      TWILIO_AUTH_TOKEN: ${{ secrets.TWILIO_AUTH_TOKEN }}
      TWILIO_FROM: ${{ secrets.TWILIO_FROM }}
      NOTIFICATION_API_URL: ${{ secrets.NOTIFICATION_API_URL }}
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push ${{ matrix.service }}
        uses: docker/build-push-action@v6
        with:
          context: BACKEND/${{ matrix.service }}
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.service }}:latest

  # ================= TEST in containers =================
  test-backend:
    runs-on: ubuntu-latest
    needs: docker-build
    env:
      NOTIFY_PORT: ${{ secrets.PORT }}
      SECURITY_PORT: ${{ secrets.SECURITY_PORT }}
      MONGODB_URI: ${{ secrets.MONGODB_URI }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      EMAIL_CONNECTION_STRING: ${{ secrets.EMAIL_CONNECTION_STRING }}
      EMAIL_SENDER_ADDRESS: ${{ secrets.EMAIL_SENDER_ADDRESS }}
      TWILIO_SID: ${{ secrets.TWILIO_SID }}
      TWILIO_AUTH_TOKEN: ${{ secrets.TWILIO_AUTH_TOKEN }}
      TWILIO_FROM: ${{ secrets.TWILIO_FROM }}
      NOTIFICATION_API_URL: ${{ secrets.NOTIFICATION_API_URL }}
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-compose-action@v1

      - name: Create external network
        run: |
          docker network inspect microservices-network || docker network create microservices-network

      - name: Generate .env for ms-notifications
        run: |
          cat > BACKEND/ms-notifications/.env <<EOF
          PORT=${{ env.NOTIFY_PORT }}
          MONGODB_URI=${{ env.MONGODB_URI }}
          JWT_SECRET=${{ env.JWT_SECRET }}
          EMAIL_CONNECTION_STRING=${{ env.EMAIL_CONNECTION_STRING }}
          EMAIL_SENDER_ADDRESS=${{ env.EMAIL_SENDER_ADDRESS }}
          TWILIO_SID=${{ env.TWILIO_SID }}
          TWILIO_AUTH_TOKEN=${{ env.TWILIO_AUTH_TOKEN }}
          TWILIO_FROM=${{ env.TWILIO_FROM }}
          EOF

      - name: Generate .env for ms-security
        run: |
          cat > BACKEND/ms-security/.env <<EOF
          MONGODB_URI=${{ env.MONGODB_URI }}
          PORT=${{ env.SECURITY_PORT }}
          NOTIFICATION_API_URL=${{ env.NOTIFICATION_API_URL }}
          JWT_SECRET=${{ env.JWT_SECRET }}
          EOF

      - name: Bring up ms-notifications
        run: |
          docker compose -f BACKEND/ms-notifications/docker-compose.yml \
            --project-directory BACKEND/ms-notifications up -d

      - name: Bring up ms-security
        run: |
          docker compose -f BACKEND/ms-security/docker-compose.yml \
            --project-directory BACKEND/ms-security up -d

      - name: Run dev in ms-notifications
        run: |
          docker compose -f BACKEND/ms-notifications/docker-compose.yml \
            --project-directory BACKEND/ms-notifications \
            run --rm ms-notifications sh -c "npm ci && npm test"

      - name: Run start:dev in ms-security
        run: |
          docker compose -f BACKEND/ms-security/docker-compose.yml \
            --project-directory BACKEND/ms-security \
            run --rm ms-security sh -c "npm ci && npm test"

      - name: Tear down services
        run: |
          docker compose -f BACKEND/ms-notifications/docker-compose.yml \
            --project-directory BACKEND/ms-notifications down
          docker compose -f BACKEND/ms-security/docker-compose.yml \
            --project-directory BACKEND/ms-security down

  # ================= DEPLOY with Docker Compose =================
  deploy-backend:
    if: github.ref == 'refs/heads/salazardevelopment'
    runs-on: ubuntu-latest
    needs: test-backend
    steps:
      - uses: actions/checkout@v3
      - uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      - uses: appleboy/scp-action@v0.1.5
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          source: |
            BACKEND/ms-notifications/docker-compose.yml
            BACKEND/ms-notifications/.env
            BACKEND/ms-security/docker-compose.yml
            BACKEND/ms-security/.env
          target: "~/app/"
      - uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          script: |
            cd ~/app
            docker-compose -f docker-compose.yml pull
            docker-compose -f docker-compose.yml up -d --remove-orphans
