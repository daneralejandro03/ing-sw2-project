name: CI Backend

on:
  push:
    branches: [salazardevelopment]
  pull_request:
    branches: [salazardevelopment]
  workflow_dispatch:

# ================= BUILD & PUSH IM√ÅGENES =================
jobs:
  docker-build:
    runs-on: ubuntu-latest
    env:
      # variables necesarias en el build (opcional)
      NOTIFY_PORT: ${{ secrets.PORT }}
      MONGODB_URI: ${{ secrets.MONGODB_URI }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up QEMU (para multi-plataforma)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push ms-notifications image
        uses: docker/build-push-action@v6
        with:
          context: BACKEND/ms-notifications
          push: true
          tags: myorg/ms-notifications:latest

      - name: Build and push ms-security image
        uses: docker/build-push-action@v6
        with:
          context: BACKEND/ms-security
          push: true
          tags: myorg/ms-security:latest

  # ================= TEST en contenedores =================
  test-backend:
    runs-on: ubuntu-latest
    needs: docker-build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Compose
        uses: docker/setup-compose-action@v1

      - name: Bring up services for testing
        uses: hoverkraft-tech/compose-action@v2.0.1
        with:
          compose-file: BACKEND/docker-compose.yml

      - name: Run tests in ms-notifications container
        run: |
          docker compose exec ms-notifications npm run test:ci

      - name: Run tests in ms-security container
        run: |
          docker compose exec ms-security npm run test:ci

      - name: Tear down Compose services
        run: docker compose down

  # ================= DEPLOY con Docker Compose =================
  deploy-backend:
    if: github.ref == 'refs/heads/salazardevelopment'
    runs-on: ubuntu-latest
    needs: test-backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up SSH
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Copy Compose files via SSH
        uses: appleboy/scp-action@v0.1.5
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "BACKEND/docker-compose.yml"
          target: "~/app/"

      - name: Deploy on remote with Docker Compose
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd ~/app
            docker-compose pull
            docker-compose up -d --remove-orphans
